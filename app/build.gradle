apply plugin: 'com.android.application'

def keysFile = rootProject.file('keys.properties')

android {

    compileSdkVersion 32

    defaultConfig {
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        applicationId "org.secuso.privacyfriendlyweather"
        minSdkVersion 17
        targetSdkVersion 32
        versionCode 15
        versionName "3.0.3"

        if (keysFile.exists()) {
            def keys = new Properties()
            keys.load(new FileInputStream(keysFile))

            def keyString = ""
            def i = 0
            println keys["$i"]
            while(keys["$i"] != null) {
                keyString += "\"" + keys["$i"] + "\""
                if(keys["${i+1}"] != null) {
                    keyString += ","
                }
                i++
            }

            buildConfigField "String[]", "DEFAULT_API_KEYS", "{" + keyString + "}"
        } else {
            buildConfigField "String[]", "DEFAULT_API_KEYS", "{null}"
        }

        buildConfigField "String", "BASE_URL", "\"https://api.openweathermap.org/data/2.5/\""

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation":"$projectDir/schemas".toString()]
            }
        }

        sourceSets {
            androidTest.assets.srcDirs += [
                    files("$projectDir/schemas".toString()),
                    files("$projectDir/src/main/assets/databases".toString())
            ]
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        androidTest {
            assets.srcDirs += ['src/main/assets/', 'src/androidTest/assets/']
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(path: ':backup-api')
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test:rules:1.4.0'

    implementation 'com.diogobernardino:williamchart:2.2'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.appcompat:appcompat:1.4.2'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.j256.ormlite:ormlite-core:5.0'
    implementation 'com.j256.ormlite:ormlite-android:5.0'
    implementation 'com.android.volley:volley:1.2.1'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'com.readystatesoftware.sqliteasset:sqliteassethelper:2.0.1'

    implementation 'androidx.room:room-runtime:2.4.3'
    annotationProcessor 'androidx.room:room-compiler:2.4.3'
    androidTestImplementation 'androidx.room:room-testing:2.4.3'

    def work_version = "2.4.0"
    implementation "androidx.work:work-runtime:$work_version"
    implementation "androidx.work:work-runtime-ktx:$work_version"
    androidTestImplementation "androidx.work:work-testing:$work_version"
}
